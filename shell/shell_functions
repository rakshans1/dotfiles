#!/bin/sh

# Edit dotfiles
function dotfiles() {
  if tmux has-session -t dotfiles 2> /dev/null; then
    tmux attach -t dotfiles
    exit
  fi

  cd ~/dotfiles && tm
}

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$@"
}


# List all files, long format, colorized, permissions in octal
function list() {
   ls -l  "$@" | awk '
    {
      k=0;
      for (i=0;i<=8;i++)
        k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));
      if (k)
        printf("%0o ",k);
      printf(" %9s  %3s %2s %5s  %6s  %s %s %s\n", $3, $6, $7, $8, $5, $9,$10, $11);
    }'
}


# Start an HTTP server from a directory, optionally specifying the port
# function serve() {
  # local port="${1:-8080}"
  # http-server . -g -b -o  -p ${port}
# }

# Kill application on particular port
function killport() {
  kill -9 $(lsof -t -i:${1})
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
  if [ -f "$1" ] ; then
    local filename=$(basename "$1")
    local foldername="${filename%%.*}"
    local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
    local didfolderexist=false
    if [ -d "$foldername" ]; then
      didfolderexist=true
      read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
      echo
      if [[ $REPLY =~ ^[Nn]$ ]]; then
        return
      fi
    fi
    mkdir -p "$foldername" && cd "$foldername"
    case $1 in
      *.tar.bz2) tar xjf "$fullpath" ;;
      *.tar.gz) tar xzf "$fullpath" ;;
      *.tar.xz) tar Jxvf "$fullpath" ;;
      *.tar.Z) tar xzf "$fullpath" ;;
      *.tar) tar xf "$fullpath" ;;
      *.taz) tar xzf "$fullpath" ;;
      *.tb2) tar xjf "$fullpath" ;;
      *.tbz) tar xjf "$fullpath" ;;
      *.tbz2) tar xjf "$fullpath" ;;
      *.tgz) tar xzf "$fullpath" ;;
      *.txz) tar Jxvf "$fullpath" ;;
      *.zip) unzip "$fullpath" ;;
      *) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Prints terinal colors
function printcolors() {
  for i in {0..255} ; do
    printf "\x1b[48;5;%sm%3d\e[0m " "$i" "$i"
    if (( i == 15 )) || (( i > 15 )) && (( (i-15) % 6 == 0 )); then
        printf "\n";
    fi
  done
}

# Tmux function to open .tmux files if it exits
function tm() {
  emulate -L zsh
  # If provided with args, pass them through.
  if [[ -n "$@" ]]; then
   tmux "$@"
    return
  fi

  # Check for .tmux file (poor man's Tmuxinator).
  if [ -f .tmux ] && [ -x .tmux ]; then
    # Prompt the first time we see a given .tmux file before running it.
    local DIGEST="$(openssl sha512 .tmux)"
    if ! grep -q "$DIGEST" ~/..tmux.digests 2> /dev/null; then
      cat .tmux
      read -k 1 -r \
        'REPLY?Trust (and run) this .tmux file? (t = trust, otherwise = skip) '
      echo
      if [[ $REPLY =~ ^[Tt]$ ]]; then
        echo "$DIGEST" >> ~/..tmux.digests
        ./.tmux
        return
      fi
    else
      ./.tmux
      return
    fi
  fi

  # Open fuzzy search to jump to exiting sessions or create new on noop
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || tmux new -A -s "$(basename "$(pwd)")"
}

# Remove old kernels and clean /boot dir
function purge_kernels() {
  echo $(dpkg --list | grep linux-image | awk '{ print $2 }' | sort -V | sed -n '/'`uname -r`'/q;p') $(dpkg --list | grep linux-headers | awk '{ print $2 }' | sort -V | sed -n '/'"$(uname -r | sed "s/\([0-9.-]*\)-\([^0-9]\+\)/\1/")"'/q;p') | xargs sudo apt-get -y purge
}

# Preview files
function p() {
  fzf --preview '[[ $(file --mime {}) =~ binary ]] &&
                echo {} is a binary file ||
                (bat --style=numbers --color=always {} ||
                highlight -O ansi -l {} ||
                coderay {} ||
                rougify {} ||
                cat {}) 2> /dev/null | head -500'
}

function fzf-preview() {
  fzf --border --ansi --multi --tac --preview-window right:70% \
    --preview "$@"
}

# Git search recent branch
function git-branch() {
  git branch -a --sort=committerdate --color=always |
 fzf-preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
  sed 's/.* //' | cut -d' ' -f1 |
  sed 's#remotes/[^/]*/##'
}

# Git checkout with fuzzy search
function gco() {
  if [ -z "$1" ]
  then
    git checkout $(git-branch)
  else
    git checkout $@
  fi
}

# copy file content to clipboard
function copy() {
  cat $1 | xclip -sel clipboard
}

# Man fuzzy search
function man() {
  if [ $# -eq 0 ]
  then
    /usr/bin/man -k . | fzf --prompt='Man> ' | awk '{print $1}' | xargs -r /usr/bin/man
  else
    /usr/bin/man $@
  fi
}

# Install deb file
function deb() {
  sudo -v
  TEMP_DEB='/tmp/'$(basename $1)
  wget -q --show-progress -O "$TEMP_DEB" $1
  sudo dpkg -i "$TEMP_DEB"
  rm -f "$TEMP_DEB"
}

# Cat
function cat() {
  case $1 in
    *.md) glow -p $@;;
    *) bat $@;;
  esac
}

# curlheader
function curlheader() {
  curl -sIXGET $1
}

function curlsize() {
  curlheader $1 | grep -i Content-Length | grep -o '[0-9]\+' | numfmt --to=iec-i --suffix=B --padding=7
}

function nix-profile() {
  local profile
  if [[ $(uname) == "Darwin" ]] && [[ $(uname -m) == 'arm64' ]]
  then
    profile="mbp"
  elif [[ $(uname) == "Darwin" ]]
  then
    profile="mbpi"
  elif [[ $(uname) == "Linux" ]]
  then
    profile="linux"
  fi

  echo $profile
}

function nix-build() {
  local current_dir=$(pwd)
  local profile=$(nix-profile)
  cd ~/dotfiles
  nix build --no-link .#homeConfigurations.$profile.activationPackage
  cd $current_dir
}

function nix-activate() {
  local current_dir=$(pwd)
  local profile=$(nix-profile)
  cd ~/dotfiles
  "$(nix path-info .#homeConfigurations.$profile.activationPackage)"/activate
  cd $current_dir
}

function nix-switch() {
  local current_dir=$(pwd)
  local profile=$(nix-profile)
  cd ~/dotfiles
  home-manager switch --flake ".#$profile"
  cd $current_dir
}

function nix-update() {
  nix flake update
}

function karabiner-build() {
  local current_dir=$(pwd)
  cd ~/dotfiles/config/karabiner
  yarn build
  cd $current_dir
}